{"version":3,"sources":["index.ts"],"names":["NativeInterface","processColor","DEFAULT_OPTIONS","title","cancelButtonTitle","takePhotoButtonTitle","chooseFromLibraryButtonTitle","quality","allowsEditing","permissionDenied","text","reTryTitle","okTitle","tintColor","ImagePicker","optionsOrCallback","callback","showImagePicker","Error","options","launchCamera","launchImageLibrary"],"mappings":"+9BASA,MAAOA,CAAAA,eAAP,KAA4B,4BAA5B,CAEA,OAAQC,YAAR,KAA2B,cAA3B,CAEA,GAAMC,CAAAA,eAAmC,CAAG,CAC1CC,KAAK,CAAE,gBADmC,CAE1CC,iBAAiB,CAAE,QAFuB,CAG1CC,oBAAoB,CAAE,aAHoB,CAI1CC,4BAA4B,CAAE,sBAJY,CAK1CC,OAAO,CAAE,GALiC,CAM1CC,aAAa,CAAE,KAN2B,CAO1CC,gBAAgB,CAAE,CAChBN,KAAK,CAAE,mBADS,CAEhBO,IAAI,CACF,mFAHc,CAIhBC,UAAU,CAAE,QAJI,CAKhBC,OAAO,CAAE,UALO,CAPwB,CAc1CC,SAAS,CAAE,EAd+B,CAA5C,C,GAoBMC,CAAAA,W,sJAKFC,iB,CACAC,Q,CACM,CACN,GAAI,MAAOD,CAAAA,iBAAP,GAA6B,UAAjC,CAA6C,CAC3C,MAAOf,CAAAA,eAAe,CAACiB,eAAhB,kBAEAf,eAFA,EAGHW,SAAS,CAAEZ,YAAY,CAACC,eAAe,CAACW,SAAjB,CAHpB,GAKLE,iBALK,CAAP,CAOD,CAED,GAAIC,QAAQ,EAAI,IAAhB,CAAsB,CACpB,KAAM,IAAIE,CAAAA,KAAJ,CAAU,8BAAV,CAAN,CACD,CAED,MAAOlB,CAAAA,eAAe,CAACiB,eAAhB,kBAEAf,eAFA,IAGAa,iBAHA,EAIHF,SAAS,CAAEZ,YAAY,CACrBc,iBAAiB,CAACF,SAAlB,EAA+BX,eAAe,CAACW,SAD1B,CAJpB,GAQLG,QARK,CAAP,CAUD,C,kDAEYG,O,CAA6BH,Q,CAA0B,CAClE,MAAOhB,CAAAA,eAAe,CAACoB,YAAhB,kBAEAlB,eAFA,IAGAiB,OAHA,EAIHN,SAAS,CAAEZ,YAAY,CAACkB,OAAO,CAACN,SAAR,EAAqBX,eAAe,CAACW,SAAtC,CAJpB,GAMLG,QANK,CAAP,CAQD,C,8DAEkBG,O,CAA6BH,Q,CAA0B,CACxE,MAAOhB,CAAAA,eAAe,CAACqB,kBAAhB,kBAEAnB,eAFA,IAGAiB,OAHA,EAIHN,SAAS,CAAEZ,YAAY,CAACkB,OAAO,CAACN,SAAR,EAAqBX,eAAe,CAACW,SAAtC,CAJpB,GAMLG,QANK,CAAP,CAQD,C,2BAGH,cAAe,IAAIF,CAAAA,WAAJ,EAAf,CAEA,WAAc,kBAAd","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n */\r\n\r\nimport NativeInterface from './internal/nativeInterface';\r\nimport {ImagePickerOptions, ImagePickerResponse} from './internal/types';\r\nimport {processColor} from 'react-native';\r\n\r\nconst DEFAULT_OPTIONS: ImagePickerOptions = {\r\n  title: 'Select a Photo',\r\n  cancelButtonTitle: 'Cancel',\r\n  takePhotoButtonTitle: 'Take Photo…',\r\n  chooseFromLibraryButtonTitle: 'Choose from Library…',\r\n  quality: 1.0,\r\n  allowsEditing: false,\r\n  permissionDenied: {\r\n    title: 'Permission denied',\r\n    text:\r\n      'To be able to take pictures with your camera and choose images from your library.',\r\n    reTryTitle: 're-try',\r\n    okTitle: \"I'm sure\",\r\n  },\r\n  tintColor: '',\r\n};\r\n\r\ntype Callback = (response: ImagePickerResponse) => void;\r\ntype OptionsOrCallback = ImagePickerOptions | Callback;\r\n\r\nclass ImagePicker {\r\n  showImagePicker(options: ImagePickerOptions, callback: Callback): void;\r\n  showImagePicker(callback: Callback): void;\r\n\r\n  showImagePicker(\r\n    optionsOrCallback: OptionsOrCallback,\r\n    callback?: Callback,\r\n  ): void {\r\n    if (typeof optionsOrCallback === 'function') {\r\n      return NativeInterface.showImagePicker(\r\n        {\r\n          ...DEFAULT_OPTIONS,\r\n          tintColor: processColor(DEFAULT_OPTIONS.tintColor),\r\n        },\r\n        optionsOrCallback,\r\n      );\r\n    }\r\n\r\n    if (callback == null) {\r\n      throw new Error('callback cannot be undefined');\r\n    }\r\n\r\n    return NativeInterface.showImagePicker(\r\n      {\r\n        ...DEFAULT_OPTIONS,\r\n        ...optionsOrCallback,\r\n        tintColor: processColor(\r\n          optionsOrCallback.tintColor || DEFAULT_OPTIONS.tintColor,\r\n        ),\r\n      },\r\n      callback,\r\n    );\r\n  }\r\n\r\n  launchCamera(options: ImagePickerOptions, callback: Callback): void {\r\n    return NativeInterface.launchCamera(\r\n      {\r\n        ...DEFAULT_OPTIONS,\r\n        ...options,\r\n        tintColor: processColor(options.tintColor || DEFAULT_OPTIONS.tintColor),\r\n      },\r\n      callback,\r\n    );\r\n  }\r\n\r\n  launchImageLibrary(options: ImagePickerOptions, callback: Callback): void {\r\n    return NativeInterface.launchImageLibrary(\r\n      {\r\n        ...DEFAULT_OPTIONS,\r\n        ...options,\r\n        tintColor: processColor(options.tintColor || DEFAULT_OPTIONS.tintColor),\r\n      },\r\n      callback,\r\n    );\r\n  }\r\n}\r\n\r\nexport default new ImagePicker();\r\n\r\nexport * from './internal/types';\r\n"]}